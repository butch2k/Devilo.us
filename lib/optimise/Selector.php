<?php
/**
 * CSSTidy - CSS Parser and Optimiser
 *
 * CSS Optimising Class
 * This class optimises CSS data generated by csstidy.
 *
 * Copyright 2005, 2006, 2007 Florian Schmitz
 *
 * This file is part of CSSTidy.
 *
 *   CSSTidy is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as published by
 *   the Free Software Foundation; either version 2.1 of the License, or
 *   (at your option) any later version.
 *
 *   CSSTidy is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Lesser General Public License for more details.
 * 
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @license http://opensource.org/licenses/lgpl-license.php GNU Lesser General Public License
 * @package CSSTidy
 * @author Florian Schmitz (floele at gmail dot com) 2005-2007
 * @author Brett Zamir (brettz9 at yahoo dot com) 2007
 * @author Nikolay Matsievsky (speed at webo dot name) 2009-2010
 * @author Jakub Onderka (acci at acci dot cz) 2011
 */
namespace CSSTidy\Optimise;

use CSSTidy\Logger;
use CSSTidy\Parser;
use CSSTidy\Element;

/**
 * CSS Optimising Class
 *
 * This class optimises CSS data generated by csstidy.
 *
 * @package csstidy
 * @author Florian Schmitz (floele at gmail dot com) 2005-2006
 * @version 1.0
 */
class Selector
{
    /** @var \CSSTidy\Logger */
    protected $logger;

    public function __construct(Logger $logger) {
        $this->logger = $logger;
    }

    public function process(Element\Block $block)
    {
        foreach ($block->elements as $element) {
            if ($element instanceof Element\Selector) {
                $this->optimise($element);
            } else if ($element instanceof Element\AtBlock) {
                $this->process($element);
            }
        }
    }

    /**
     * Removes universal selector * if is not necessary and spaces before and after '+' and '>'
     * @param \CSSTidy\Element\Selector $selector
     */
    public function optimise(Element\Selector $selector)
    {
        foreach ($selector->subSelectors as &$subSelector) {
            $optimised = '';

            for ($i = 0, $length = strlen($subSelector); $i < $length; $i++) {
                $current = $subSelector{$i};

                if (($current === '"' || $current === "'") && !Parser::escaped($subSelector, $i)) {
                    $optimised .= $this->skipString($subSelector, $i, $current);
                } else if ($current === '*' && isset($subSelector{$i+1}) && in_array($subSelector{$i+1}, array('.', '#', '[', ':'))) {
                    // remove unnecessary universal selector, FS#147
                } else if ($current === '>' || $current === '+') {
                    $optimised = rtrim($optimised) . $current;
                    if (isset($subSelector{$i+1}) && ctype_space($subSelector{$i+1})) {
                        ++$i; // Skip next space
                    }
                } else {
                    $optimised .= $current;
                }
            }

            $subSelector = $optimised;
        }

        $selector->setName(implode(',', $selector->subSelectors));
    }

    /**
     * @param string $string
     * @param int $i
     * @param string $endsWith
     * @return string Skipped string
     */
    protected function skipString($string, &$i, $endsWith)
    {
        $start = $i;

        do {
            $i = strpos($string, $endsWith, $i+1);
        } while (Parser::escaped($string, $i));

        return substr($string, $start, $i - $start + 1);
    }
}